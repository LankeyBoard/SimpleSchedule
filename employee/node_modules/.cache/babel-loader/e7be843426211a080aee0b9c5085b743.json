{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documents\\\\Classes\\\\SimpleSchedule\\\\employee\\\\src\\\\App.js\";\nimport React, { useState } from 'react'; // import Axios from 'axios'\n\nimport { BrowserRouter as Router, Route, Switch // ,Redirect\n} from 'react-router-dom';\nimport HomePage from './pages/HomePage';\nimport TimeOff from './pages/TimeOff';\nimport Info from './pages/EmployeeInfo';\nimport NavBar from './pages/NavBar';\nimport CreateShift from './pages/CreateShift';\nimport NotFoundPage from './pages/NotFoundPage';\nimport Login from './pages/LoginPage';\nimport ProtectedRoute from \"./pages/ProtectedRoute\";\nimport TokenService from './services/tokenService';\nexport default (() => {\n  const [jwt, setJwt] = useState('');\n  const [isLoggedIn, changeLoginState] = useState(false);\n  const [token, setToken] = useState(\"\");\n  const [userData, setUserData] = useState({});\n\n  const toggle = loggingAction => {\n    if (loggingAction === 'logout') {\n      changeLoginState(!isLoggedIn);\n      setToken('');\n    } // ....THIS IS REGISTRATION LOGIC....\n\n    /*\r\n    if(isLoggedIn===true) {\r\n      alert('remove token from memmory...')\r\n      changeLoginState(true)\r\n    }\r\n    */\n\n    /*\r\n    const newIsLoggedInState = !isLoggedIn\r\n    changeLoginState(newIsLoggedInState)\r\n    if(newIsLoggedInState) {\r\n      // this means we are now logged in...\r\n      Axios.post('./api/users', {\r\n        \"name\": \"unclefifi\",\r\n        \"email\": \"unclefifi@gmail.com\",\r\n        \"password\": \"papai\"\r\n      }).then((axiosApiResponse) => {\r\n        const token = axiosApiResponse.data.token\r\n        setToken(token)\r\n        alert(token)\r\n      }).catch((axiosError) => {\r\n        if(axiosError\r\n          && axiosError.response\r\n          && axiosError.response.data\r\n          && Array.isArray(axiosError.response.data.errors)\r\n          && axiosError.response.data.errors.length > 0) {\r\n            const { errors } = axiosError.response.data\r\n            errors.forEach(i => {\r\n              alert(i.msg)\r\n            })\r\n          }\r\n      })\r\n    }*/\n\n  };\n\n  const receiveNewJwt = jwt => {\n    console.log(jwt);\n    setJwt(jwt);\n    setUserData(TokenService.retrieveTokenData(jwt));\n    changeLoginState(true);\n  };\n\n  return /*#__PURE__*/React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(NavBar, {\n    isLoggedIn: isLoggedIn,\n    toggled: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"page-body\",\n    className: \"flexbox-wrapper vertical\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    path: \"/\",\n    exact: true,\n    render: props => /*#__PURE__*/React.createElement(ProtectedRoute, Object.assign({}, props, {\n      isLoggedIn: isLoggedIn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 30\n      }\n    }), /*#__PURE__*/React.createElement(HomePage, {\n      userData: userData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 81\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: \"/login\",\n    exact: true,\n    render: props => /*#__PURE__*/React.createElement(Login, Object.assign({}, props, {\n      newJwtNotify: receiveNewJwt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 30\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/info\",\n    render: props => /*#__PURE__*/React.createElement(ProtectedRoute, Object.assign({}, props, {\n      isLoggedIn: isLoggedIn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 30\n      }\n    }), /*#__PURE__*/React.createElement(Info, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 81\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/timeOff\",\n    render: props => /*#__PURE__*/React.createElement(ProtectedRoute, Object.assign({}, props, {\n      isLoggedIn: isLoggedIn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 30\n      }\n    }), /*#__PURE__*/React.createElement(TimeOff, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 81\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    component: NotFoundPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }))));\n});","map":{"version":3,"sources":["D:/Documents/Classes/SimpleSchedule/employee/src/App.js"],"names":["React","useState","BrowserRouter","Router","Route","Switch","HomePage","TimeOff","Info","NavBar","CreateShift","NotFoundPage","Login","ProtectedRoute","TokenService","jwt","setJwt","isLoggedIn","changeLoginState","token","setToken","userData","setUserData","toggle","loggingAction","receiveNewJwt","console","log","retrieveTokenData","props"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\n// import Axios from 'axios'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch\r\n  // ,Redirect\r\n} from 'react-router-dom'\r\nimport HomePage from './pages/HomePage'\r\nimport TimeOff from './pages/TimeOff'\r\nimport Info from './pages/EmployeeInfo'\r\nimport NavBar from './pages/NavBar'\r\nimport CreateShift from './pages/CreateShift'\r\nimport NotFoundPage from './pages/NotFoundPage'\r\nimport Login from './pages/LoginPage'\r\nimport ProtectedRoute from \"./pages/ProtectedRoute\"\r\nimport TokenService from './services/tokenService'\r\n\r\n\r\nexport default () => {\r\n\r\n  const [jwt, setJwt] = useState('')\r\n  const [isLoggedIn, changeLoginState] = useState(false)\r\n  const [token, setToken] = useState(\"\")\r\n  const [userData, setUserData] = useState({})\r\n\r\n  const toggle = (loggingAction) => {\r\n\r\n    if(loggingAction === 'logout') {\r\n      changeLoginState(!isLoggedIn)\r\n      setToken('')\r\n    }\r\n\r\n    // ....THIS IS REGISTRATION LOGIC....\r\n    /*\r\n    if(isLoggedIn===true) {\r\n      alert('remove token from memmory...')\r\n      changeLoginState(true)\r\n    }\r\n    */\r\n\r\n    /*\r\n    const newIsLoggedInState = !isLoggedIn\r\n    changeLoginState(newIsLoggedInState)\r\n    if(newIsLoggedInState) {\r\n      // this means we are now logged in...\r\n      Axios.post('./api/users', {\r\n        \"name\": \"unclefifi\",\r\n        \"email\": \"unclefifi@gmail.com\",\r\n        \"password\": \"papai\"\r\n      }).then((axiosApiResponse) => {\r\n        const token = axiosApiResponse.data.token\r\n        setToken(token)\r\n        alert(token)\r\n      }).catch((axiosError) => {\r\n        if(axiosError\r\n          && axiosError.response\r\n          && axiosError.response.data\r\n          && Array.isArray(axiosError.response.data.errors)\r\n          && axiosError.response.data.errors.length > 0) {\r\n            const { errors } = axiosError.response.data\r\n            errors.forEach(i => {\r\n              alert(i.msg)\r\n            })\r\n          }\r\n      })\r\n    }*/\r\n  }\r\n\r\n  const receiveNewJwt = jwt => {\r\n    console.log(jwt)\r\n    setJwt(jwt)\r\n    setUserData(TokenService.retrieveTokenData(jwt))\r\n    changeLoginState(true)\r\n  }\r\n\r\n\r\n\r\n  return <Router>\r\n\r\n    <NavBar isLoggedIn={isLoggedIn} toggled={toggle}/>\r\n\r\n    <div id=\"page-body\" className=\"flexbox-wrapper vertical\">\r\n      <Switch>\r\n\r\n        <Route \r\n          path=\"/\" \r\n          exact\r\n          render={(props) => <ProtectedRoute {...props} isLoggedIn={isLoggedIn}><HomePage userData={userData}/></ProtectedRoute>}\r\n        />\r\n\r\n        <Route \r\n          path=\"/login\" \r\n          exact\r\n          render={(props) => <Login {...props} newJwtNotify={receiveNewJwt}/>}\r\n        />\r\n\r\n        <Route \r\n          exact\r\n          path=\"/info\" \r\n          render={(props) => <ProtectedRoute {...props} isLoggedIn={isLoggedIn}><Info/></ProtectedRoute>}\r\n        />\r\n\r\n        <Route \r\n          exact\r\n          path=\"/timeOff\" \r\n          render={(props) => <ProtectedRoute {...props} isLoggedIn={isLoggedIn}><TimeOff/></ProtectedRoute>}\r\n        />\r\n\r\n        <Route component={NotFoundPage} />\r\n\r\n      </Switch>\r\n    </div>\r\n</Router>\r\n\r\n}"]},"metadata":{},"sourceType":"module"}