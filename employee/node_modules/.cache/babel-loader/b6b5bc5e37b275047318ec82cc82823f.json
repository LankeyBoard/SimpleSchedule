{"ast":null,"code":"import _slicedToArray from\"D:\\\\Documents\\\\Classes\\\\SimpleSchedule\\\\employee\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';// import Axios from 'axios'\nimport{BrowserRouter as Router,Route,Switch// ,Redirect\n}from'react-router-dom';import HomePage from'./pages/HomePage';import TimeOff from'./pages/TimeOff';import Info from'./pages/EmployeeInfo';import NavBar from'./pages/NavBar';import CreateShift from'./pages/CreateShift';import NotFoundPage from'./pages/NotFoundPage';import Login from'./pages/LoginPage';import ProtectedRoute from\"./pages/ProtectedRoute\";import TokenService from'./services/tokenService';export default(function(){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),jwt=_useState2[0],setJwt=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isLoggedIn=_useState4[0],changeLoginState=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),token=_useState6[0],setToken=_useState6[1];var _useState7=useState({}),_useState8=_slicedToArray(_useState7,2),userData=_useState8[0],setUserData=_useState8[1];var toggle=function toggle(loggingAction){if(loggingAction==='logout'){changeLoginState(!isLoggedIn);setToken('');}// ....THIS IS REGISTRATION LOGIC....\n/*\r\n    if(isLoggedIn===true) {\r\n      alert('remove token from memmory...')\r\n      changeLoginState(true)\r\n    }\r\n    */ /*\r\n    const newIsLoggedInState = !isLoggedIn\r\n    changeLoginState(newIsLoggedInState)\r\n    if(newIsLoggedInState) {\r\n      // this means we are now logged in...\r\n      Axios.post('./api/users', {\r\n        \"name\": \"unclefifi\",\r\n        \"email\": \"unclefifi@gmail.com\",\r\n        \"password\": \"papai\"\r\n      }).then((axiosApiResponse) => {\r\n        const token = axiosApiResponse.data.token\r\n        setToken(token)\r\n        alert(token)\r\n      }).catch((axiosError) => {\r\n        if(axiosError\r\n          && axiosError.response\r\n          && axiosError.response.data\r\n          && Array.isArray(axiosError.response.data.errors)\r\n          && axiosError.response.data.errors.length > 0) {\r\n            const { errors } = axiosError.response.data\r\n            errors.forEach(i => {\r\n              alert(i.msg)\r\n            })\r\n          }\r\n      })\r\n    }*/};var receiveNewJwt=function receiveNewJwt(jwt){console.log(jwt);setJwt(jwt);setUserData(TokenService.retrieveTokenData(jwt));changeLoginState(true);};return/*#__PURE__*/React.createElement(Router,null,/*#__PURE__*/React.createElement(NavBar,{isLoggedIn:isLoggedIn,toggled:toggle}),/*#__PURE__*/React.createElement(\"div\",{id:\"page-body\",className:\"flexbox-wrapper vertical\"},/*#__PURE__*/React.createElement(Switch,null,/*#__PURE__*/React.createElement(Route,{path:\"/\",exact:true,render:function render(props){return/*#__PURE__*/React.createElement(ProtectedRoute,Object.assign({},props,{isLoggedIn:isLoggedIn}),/*#__PURE__*/React.createElement(HomePage,{userData:userData}));}}),/*#__PURE__*/React.createElement(Route,{path:\"/login\",exact:true,render:function render(props){return/*#__PURE__*/React.createElement(Login,Object.assign({},props,{newJwtNotify:receiveNewJwt}));}}),/*#__PURE__*/React.createElement(Route,{exact:true,path:\"/info\",render:function render(props){return/*#__PURE__*/React.createElement(ProtectedRoute,Object.assign({},props,{isLoggedIn:isLoggedIn}),/*#__PURE__*/React.createElement(Info,null));}}),/*#__PURE__*/React.createElement(Route,{exact:true,path:\"/timeOff\",render:function render(props){return/*#__PURE__*/React.createElement(ProtectedRoute,Object.assign({},props,{isLoggedIn:isLoggedIn}),/*#__PURE__*/React.createElement(TimeOff,null));}}),/*#__PURE__*/React.createElement(Route,{component:NotFoundPage}))));});","map":{"version":3,"sources":["D:/Documents/Classes/SimpleSchedule/employee/src/App.js"],"names":["React","useState","BrowserRouter","Router","Route","Switch","HomePage","TimeOff","Info","NavBar","CreateShift","NotFoundPage","Login","ProtectedRoute","TokenService","jwt","setJwt","isLoggedIn","changeLoginState","token","setToken","userData","setUserData","toggle","loggingAction","receiveNewJwt","console","log","retrieveTokenData","props"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\n// import Axios from 'axios'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch\r\n  // ,Redirect\r\n} from 'react-router-dom'\r\nimport HomePage from './pages/HomePage'\r\nimport TimeOff from './pages/TimeOff'\r\nimport Info from './pages/EmployeeInfo'\r\nimport NavBar from './pages/NavBar'\r\nimport CreateShift from './pages/CreateShift'\r\nimport NotFoundPage from './pages/NotFoundPage'\r\nimport Login from './pages/LoginPage'\r\nimport ProtectedRoute from \"./pages/ProtectedRoute\"\r\nimport TokenService from './services/tokenService'\r\n\r\n\r\nexport default () => {\r\n\r\n  const [jwt, setJwt] = useState('')\r\n  const [isLoggedIn, changeLoginState] = useState(false)\r\n  const [token, setToken] = useState(\"\")\r\n  const [userData, setUserData] = useState({})\r\n\r\n  const toggle = (loggingAction) => {\r\n\r\n    if(loggingAction === 'logout') {\r\n      changeLoginState(!isLoggedIn)\r\n      setToken('')\r\n    }\r\n\r\n    // ....THIS IS REGISTRATION LOGIC....\r\n    /*\r\n    if(isLoggedIn===true) {\r\n      alert('remove token from memmory...')\r\n      changeLoginState(true)\r\n    }\r\n    */\r\n\r\n    /*\r\n    const newIsLoggedInState = !isLoggedIn\r\n    changeLoginState(newIsLoggedInState)\r\n    if(newIsLoggedInState) {\r\n      // this means we are now logged in...\r\n      Axios.post('./api/users', {\r\n        \"name\": \"unclefifi\",\r\n        \"email\": \"unclefifi@gmail.com\",\r\n        \"password\": \"papai\"\r\n      }).then((axiosApiResponse) => {\r\n        const token = axiosApiResponse.data.token\r\n        setToken(token)\r\n        alert(token)\r\n      }).catch((axiosError) => {\r\n        if(axiosError\r\n          && axiosError.response\r\n          && axiosError.response.data\r\n          && Array.isArray(axiosError.response.data.errors)\r\n          && axiosError.response.data.errors.length > 0) {\r\n            const { errors } = axiosError.response.data\r\n            errors.forEach(i => {\r\n              alert(i.msg)\r\n            })\r\n          }\r\n      })\r\n    }*/\r\n  }\r\n\r\n  const receiveNewJwt = jwt => {\r\n    console.log(jwt)\r\n    setJwt(jwt)\r\n    setUserData(TokenService.retrieveTokenData(jwt))\r\n    changeLoginState(true)\r\n  }\r\n\r\n\r\n\r\n  return <Router>\r\n\r\n    <NavBar isLoggedIn={isLoggedIn} toggled={toggle}/>\r\n\r\n    <div id=\"page-body\" className=\"flexbox-wrapper vertical\">\r\n      <Switch>\r\n\r\n        <Route \r\n          path=\"/\" \r\n          exact\r\n          render={(props) => <ProtectedRoute {...props} isLoggedIn={isLoggedIn}><HomePage userData={userData}/></ProtectedRoute>}\r\n        />\r\n\r\n        <Route \r\n          path=\"/login\" \r\n          exact\r\n          render={(props) => <Login {...props} newJwtNotify={receiveNewJwt}/>}\r\n        />\r\n\r\n        <Route \r\n          exact\r\n          path=\"/info\" \r\n          render={(props) => <ProtectedRoute {...props} isLoggedIn={isLoggedIn}><Info/></ProtectedRoute>}\r\n        />\r\n\r\n        <Route \r\n          exact\r\n          path=\"/timeOff\" \r\n          render={(props) => <ProtectedRoute {...props} isLoggedIn={isLoggedIn}><TimeOff/></ProtectedRoute>}\r\n        />\r\n\r\n        <Route component={NotFoundPage} />\r\n\r\n      </Switch>\r\n    </div>\r\n</Router>\r\n\r\n}"]},"metadata":{},"sourceType":"module"}